openapi: 3.0.3
info:
  title: Order API
  description: API for managing customer orders
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /orders:
    get:
      summary: Get all orders
      description: Retrieves all orders with populated user info.
      tags:
        - Orders
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Error fetching orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new order
      description: Creates a new order with the provided data.
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
        required: true
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '500':
          description: Error creating order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/user/{userId}:
    get:
      summary: Get orders by user ID
      description: Retrieves all orders for the specified user.
      tags:
        - Orders
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: Successfully retrieved orders for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Error fetching orders for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    put:
      summary: Update an order
      description: Updates an existing order by ID.
      tags:
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the order to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
        required: true
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error updating order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
          example: "64a9b0c2f5a5d2a7e4f4a1b2"
        order_number:
          type: string
          example: "ORD-1001"
        total_amount:
          type: number
          example: 250.75
        user_id:
          type: string
          example: "64a8f9b3d5e2a7c9b8f4a2d1"
        user_name:
          type: string
          example: "John Doe"
        user_info:
          type: object
          properties:
            _id:
              type: string
              example: "64a8f9b3d5e2a7c9b8f4a2d1"
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john@example.com"

    OrderInput:
      type: object
      properties:
        order_number:
          type: string
          example: "ORD-1001"
        total_amount:
          type: number
          example: 250.75
        user_id:
          type: string
          example: "64a8f9b3d5e2a7c9b8f4a2d1"
        user_name:
          type: string
          example: "John Doe"
      required:
        - order_number
        - total_amount
        - user_id

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Something went wrong"
