openapi: 3.0.3
info:
  title: User API
  description: API for managing users, authentication, and addresses.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /users/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
                - email
                - password
        required: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/multiple-addresses:
    get:
      summary: Get users with multiple addresses
      tags:
        - Users
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: Error retrieving users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get all users
      description: Retrieves all users with optional filtering, searching, and sorting.
      tags:
        - Users
      parameters:
        - in: query
          name: min_age
          schema:
            type: integer
          description: Minimum age to filter users
        - in: query
          name: city
          schema:
            type: string
          description: Filter users by city
        - in: query
          name: search
          schema:
            type: string
          description: Search term for name, email, or gender
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [name, email, created_at]
            default: created_at
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  stats:
                    type: object
                    properties:
                      averageAge:
                        type: number
                        example: 29.4
                      totalCount:
                        type: integer
                        example: 120
        '500':
          description: Error fetching users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/addresses:
    get:
      summary: Get addresses of a user
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: Successfully retrieved addresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  addresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "64a9b0c2f5a5d2a7e4f4a1b2"
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        age:
          type: string
          example: "30"
        gender:
          type: string
          example: Male
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        pageAccess:
          type: array
          items:
            type: string
          example: ["Users", "Posts"]
        created_at:
          type: string
          format: date-time
          example: "2025-07-29T12:34:56Z"

    UserInput:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: password123
        age:
          type: string
          example: "30"
        gender:
          type: string
          example: Male
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        pageAccess:
          type: array
          items:
            type: string
          example: ["Users", "Posts"]

    Address:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zip:
          type: string
          example: "10001"

    Error:
      type: object
      properties:
        message:
          type: string
          example: Something went wrong
