openapi: 3.0.3
info:
  title: Posts API
  description: API for managing posts with search, sort, and category filtering.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /posts:
    get:
      summary: Get all posts
      description: Retrieves a list of posts with optional search and sorting.
      tags:
        - Posts
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for filtering posts by title.
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [title, created_at]
            default: created_at
          description: Field to sort by.
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order.
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  stats:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                        example: 25
        '500':
          description: Error fetching posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new post
      description: Creates a new post.
      tags:
        - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
        required: true
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    put:
      summary: Update a post
      description: Updates an existing post by ID.
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to update.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
        required: true
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a post
      description: Deletes an existing post by ID.
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to delete.
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post deleted successfully
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error deleting post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/category/{categoryId}:
    get:
      summary: Get posts by category
      description: Retrieves posts belonging to a specific category.
      tags:
        - Posts
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
          description: ID of the category.
      responses:
        '200':
          description: List of posts for the category
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '500':
          description: Error fetching posts by category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
          example: "64a9b0c2f5a5d2a7e4f4a1b2"
        title:
          type: string
          example: "My First Blog Post"
        content:
          type: string
          example: "This is the content of the post."
        categories:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: "64a8f9b3d5e2a7c9b8f4a2d1"
              name:
                type: string
                example: "Technology"
        user_id:
          type: string
          example: "64a8f9b3d5e2a7c9b8f4a2d1"
        user_info:
          type: object
          properties:
            _id:
              type: string
              example: "64a8f9b3d5e2a7c9b8f4a2d1"
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john@example.com"
        created_at:
          type: string
          format: date-time
          example: "2025-07-29T12:34:56Z"

    PostInput:
      type: object
      properties:
        title:
          type: string
          example: "My First Blog Post"
        content:
          type: string
          example: "This is the content of the post."
        categories:
          type: array
          items:
            type: string
            example: "64a8f9b3d5e2a7c9b8f4a2d1"
        user_id:
          type: string
          example: "64a8f9b3d5e2a7c9b8f4a2d1"
      required:
        - title
        - content
        - categories
        - user_id

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Something went wrong"
